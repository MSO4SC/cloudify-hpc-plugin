########
# Copyright (c) 2017-2018 MSO4SC - javier.carnero@atos.net
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

tosca_definitions_version: cloudify_dsl_1_3

imports:
    # to speed things up, it is possible downloading this file,
    - http://raw.githubusercontent.com/mso4sc/cloudify-hpc-plugin/master/resources/types/cfy_types.yaml
    - http://www.getcloudify.org/spec/openstack-plugin/2.9.0/plugin.yaml
    # relative import of plugin.yaml that resides in the blueprint directory
    - plugin.yaml

inputs:
    monitor_entrypoint:
        description: Monitor entrypoint IP
        default: ""
        type: string

    job_prefix:
        description: Job name prefix in HPCs
        default: "cfyhpc"
        type: string

    mso4sc_wm_hpc:
        description: Configuration of the workload manager for the  HPC to be used
        default: {}

    partition:
        description: Partition in which the jobs will run
        default: "public"
        type: string

    mso4sc_wm_openstack:
        description: Configuration of the workload manager for the VM to be used
        default: {}

    ################### DATA PUBLISH ##################
    mso4sc_datacatalogue_entrypoint:
        description: entrypoint of the data catalogue
        default: "http://193.144.35.207"

    mso4sc_datacatalogue_key:
        description: API Key to publish the outputs
        default: ""

    mso4sc_outdataset_outputs_at:
        description: ID of the CKAN output dataset
        default: ""

    #################### OPENSTACK ####################
    openstack_config:
        default: {}

    openstack_config2:
        default: {}

    openstack_network:
        default: ""

    openstack_keypair:
        default: ""

    openstack_floatingip:
        default: ""
    
    openstack_image:
        default: ""
    
    openstack_flavor:
        default: ""

    ###################################################

node_templates:

    mso4sc-network:
        type: cloudify.openstack.nodes.Network
        properties:
            use_external_resource: true
            resource_id: { get_input: openstack_network }
            openstack_config: { get_input: openstack_config }

    keypair:
        type: cloudify.openstack.nodes.KeyPair
        properties:
            use_external_resource: true
            resource_id: { get_input: openstack_keypair }
            private_key_path: keys/id_rsa
            openstack_config: { get_input: openstack_config }

    #my_floating_ip:
    #    type: cloudify.openstack.nodes.FloatingIP
    #    properties:
    #        use_external_resource: true
    #        resource_id: { get_input: openstack_floatingip }
    #        openstack_config: { get_input: openstack_config }

    my_server:
        type: cloudify.openstack.nodes.Server
        properties:
            agent_config:
                install_method: none
            resource_id: cfy_test
            image: { get_input: openstack_image }
            flavor: { get_input: openstack_flavor }
            openstack_config: { get_input: openstack_config }
        relationships:
            - type: cloudify.openstack.server_connected_to_keypair
              target: keypair
            - type: cloudify.relationships.connected_to
              target: mso4sc-network
            #- type: cloudify.openstack.server_connected_to_floating_ip
            #  target: my_floating_ip

    hpc_wm:
        type: hpc.nodes.WorkloadManager
        properties:
            config: { get_input: mso4sc_wm_hpc }
            external_monitor_entrypoint: { get_input: monitor_entrypoint }
            job_prefix: { get_input: job_prefix }
            workdir_prefix: "single_sbatch"
            # simulate: True  # COMMENT to test against a real HPC

    openstack_wm:
        type: hpc.nodes.WorkloadManager
        properties:
            config: { get_input: mso4sc_wm_openstack }
            external_monitor_entrypoint: { get_input: monitor_entrypoint }
            job_prefix: { get_input: job_prefix }
            workdir_prefix: "single_shell"
            # simulate: True  # COMMENT to test against a real HPC
        relationships:
            - type: wm_contained_in
              target: my_server
    
    hpc_job:
        type: hpc.nodes.Job
        properties:
            job_options:
                type: 'SBATCH'
                command: "touch.script single_hpc.test"
            deployment:
                bootstrap: 'scripts/bootstrap_sbatch_example.sh'
                revert: 'scripts/revert_sbatch_example.sh'
                inputs:
                    - 'single'
                    - { get_input: partition }
            publish:
                - type: "CKAN"
                  entrypoint: { get_input: mso4sc_datacatalogue_entrypoint}
                  api_key: { get_input: mso4sc_datacatalogue_key }
                  dataset: { get_input: mso4sc_outdataset_outputs_at }
                  file_path: "$CURRENT_WORKDIR/single_hpc.test"
                  name: "single_hpc"
                  description: "output test hpc"
        relationships:
            - type: job_managed_by_wm
              target: hpc_wm
    
    vm_job:
        type: hpc.nodes.Job
        properties:
            job_options:
                type: 'SHELL'
                command: "touch single_vm.test"
            publish:
                - type: "CKAN"
                  entrypoint: { get_input: mso4sc_datacatalogue_entrypoint}
                  api_key: { get_input: mso4sc_datacatalogue_key }
                  dataset: { get_input: mso4sc_outdataset_outputs_at }
                  file_path: "$CURRENT_WORKDIR/single_vm.test"
                  name: "single_vm"
                  description: "output test vm"
        relationships:
            - type: job_managed_by_wm
              target: openstack_wm

outputs:
    single_job_name:
        description: single job name in the HPC
        value: { get_attribute: [vm_job, job_name] }
